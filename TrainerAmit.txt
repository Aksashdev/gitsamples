    Lab 1

     

    Jenkins master setup: https://www.jenkins.io/doc/book/installing/linux/#red-hat-centos

     

    sudo wget -O /etc/yum.repos.d/jenkins.repo  https://pkg.jenkins.io/redhat-stable/jenkins.repo

    sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

    yum update


    # Add required dependencies for the jenkins package

    sudo yum install fontconfig java-21-openjdk

    sudo yum install jenkins

    sudo systemctl daemon-reload

    systemctl status jenkins

    systemctl enable jenkins

    systemctl start jenkins

    systemctl status jenkins

     


    ------------------------

    Lab2

    1) In the browser : localhost:8080


    2) Go to terminal and type


    cat /var/lib/jenkins/secrets/initialAdminPassword


    3) get the password and login


    4) Install suggested plugin


     

     Lab 3:

    Lab 2 https://www.openwriteup.com/?page_id=1115


    node {

    // Define the label of the agent where you want to run the pipeline

    //label 'mylabel'

    stage('Checkout') {

    // Checkout code from the Git repository

    sh 'echo checking out'

    }

    stage('Build') {

    // Build the Java application (replace with your build commands)

    sh 'java --version'

    }

    stage('Deploy') {

    // Deploy the application (replace with your deployment commands)

    sh 'echo "Deploying the application"'

    }

    }



    Plugin: pipeline stage view


-----------------

Lab 4 : Decalartive pipeline :https://www.openwriteup.com/?page_id=1115 (Lab 3)

pipeline {
agent any
stages {
  stage('Checkout') {
    steps {
// Checkout code from the Git repository
     sh 'echo checking out'
   }
  }
stage('Build') {
  steps {
// Build the Java application (replace with your build commands)
  sh 'javac -version'
 }
}
stage('Deploy') {
  steps {
  // Deploy the application (replace with your deployment commands)
   sh 'echo "Deploying the application"'
   }
  }
 } 
} 


Lab 5: Assignment
    

    Go in your git repo “myrepo”

    Create a “Jenkinsfile”

    Copy the code from lab 3

    checkin the code to github (using git add,commit and push

    Create a new pipeline and scripting block dropdown, select “pipeline with SCM”

    Mention your git repo and save .

    Run the build



--------------------------------------
27/05

git add,commit and push using  ssh

https://www.openwriteup.com/?page_id=1075

Do the git init, git add, git commit

     


    LAb2


    https://www.openwriteup.com/?page_id=1081


    Lab3:


    dnf install maven -y


    Lab 1: https://www.openwriteup.com/?page_id=1135


    Lab 2: https://www.openwriteup.com/?page_id=1135


    Lab 4: https://www.openwriteup.com/?page_id=1135


    Lab https://www.openwriteup.com/?page_id=1073 (lab 17)



---------------------------

    28/05


    https://www.sonarsource.com/products/sonarcloud/


    Lab https://www.openwriteup.com/?page_id=1223

     

     

    vi /etc/sudoers


    jenkins ALL=(ALL) NOPASSWD: ALL

     

     pipeline {

    agent any


    stages {

    stage('chckout scm') {

    steps {

    checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/hellokaton/java11-examples.git']])

    }

    }

    stage('Compiling and Running Test Cases') {

    steps {

    sh 'mvn clean'

    sh 'mvn compile'

    sh 'mvn test'

    }

    }

    stage('Generating a Cucumber Reports') {

    steps {

    script {

    // Run Cucumber tests and generate reports

    sh 'mvn verify'

    }

    }

    }

    stage('Creating Package') {

    steps {

    sh 'mvn package'

    }

    }

    stage('adding genrerate report'){

    steps {

    sh 'mvn verify'

    }

    }

    stage('Install sonarqube cli') {

    steps {

    // Step to install SonarQube CLI

    sh 'sudo wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip'

    sh 'sudo unzip -o -q sonar-scanner.zip'

    sh 'sudo rm -rf /opt/sonar-scanner'

    sh 'sudo mv --force sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner'

    sh 'sudo sh -c \'echo "#/bin/bash \nexport PATH=\\\"$PATH:/opt/sonar-scanner/bin\\\"" >/etc/profile.d/sonar-scanner.sh\''

    sh 'sudo chmod +x /opt/sonar-scanner/bin/sonar-scanner'

    sh '. /etc/profile.d/sonar-scanner.sh'

    }

    }


    stage('Analyzing Code Quality') {

    steps {

    // Step to analyze code quality with SonarQube

    sh '/opt/sonar-scanner/bin/sonar-scanner -Dsonar.projectKey=owtest23_myproj -Dsonar.organization=owtest23 -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300 -Dsonar.sources=src/main/java/ -Dsonar.java.binaries=target/classes -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=cd718b63ea3b0b88b10541ff23b08430789260e1'

    }

    }

    }

    }

    ---------------------------

    install dcoekr 

    LAb 1 : https://www.openwriteup.com/?page_id=785


    Lab2:


    docker search nginx

    docker pull nginx

    docker images


    docker pull mysql:innovation

    docker images



    docker pull mysql:innovation

    docker images


    #To check the running container

     

    docker ps


    docker run -d --name mycontainer nginx


    docker ps


    docker stop mycontainer


    docker ps


    docker ps -a


    docker start mycontainer


    docker ps


    -------------------------------


    docker inspect mycontainer


    '---------------




























